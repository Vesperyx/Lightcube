import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import savgol_filter

def direct_phase_posalice(func, x_range=(-10, 10), num_points=1000, 
                          filter_param=0.3, add_noise=False, noise_level=0.2):
    """
    Process a function using direct phase encoding with imaginary unit.
    
    Parameters:
    -----------
    func : callable
        Function to process
    x_range : tuple
        Domain (min, max)
    num_points : int
        Number of points in grid
    filter_param : float
        Filter parameter (0-1)
    add_noise : bool
        Whether to add noise
    noise_level : float
        Noise standard deviation
        
    Returns:
    --------
    result : dict
        Dictionary with results
    """
    # Create grid
    x = np.linspace(x_range[0], x_range[1], num_points)
    
    # Evaluate function (add noise if requested)
    f_original = func(x)
    if add_noise:
        np.random.seed(42)
        noise = np.random.normal(0, noise_level, size=num_points)
        f_noisy = f_original + noise
    else:
        f_noisy = f_original.copy()
    
    # Step 1: Direct phase encoding
    # Scale function to reasonable range for phase (between -π and π)
    f_min, f_max = np.min(f_noisy), np.max(f_noisy)
    f_scaled = (f_noisy - f_min) / (f_max - f_min) * 2 * np.pi - np.pi
    
    # Create complex representation directly (no logarithm or exponential)
    # This is the key insight - using i as direct information generator
    psi = np.exp(1j * f_scaled)
    
    # Step 2: Extract phase and amplitude
    phase = np.angle(psi)
    amplitude = np.abs(psi)  # Should be all 1s but include for completeness
    
    # Step 3: Apply filtering directly to the phase
    # This is gentler than frequency domain filtering
    window_size = max(5, int(num_points * filter_param * 0.1))
    if window_size % 2 == 0:
        window_size += 1
    smoothed_phase = savgol_filter(phase, window_size, 3)
    
    # Step 4: Reconstruct with filtered phase
    psi_filtered = amplitude * np.exp(1j * smoothed_phase)
    
    # Step 5: Recover function from phase
    f_extracted = np.angle(psi_filtered)
    
    # Rescale back to original range
    f_processed = (f_extracted + np.pi) / (2 * np.pi) * (f_max - f_min) + f_min
    
    # Calculate error metrics
    if add_noise:
        mse_noisy = np.mean((f_original - f_noisy)**2)
        mse_processed = np.mean((f_original - f_processed)**2)
        error_reduction = 100 * (1 - mse_processed/mse_noisy)
        print(f"MSE before processing: {mse_noisy:.6f}")
        print(f"MSE after processing: {mse_processed:.6f}")
        print(f"Error reduction: {error_reduction:.2f}%")
    
    return {
        'x': x,
        'f_original': f_original,
        'f_noisy': f_noisy,
        'f_processed': f_processed,
        'psi': psi,
        'psi_filtered': psi_filtered,
        'phase': phase,
        'smoothed_phase': smoothed_phase
    }

def visualize_phase_results(results, title=None):
    """Visualize phase encoding results."""
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    if title:
        fig.suptitle(title, fontsize=16)
    
    # Function comparison
    axes[0, 0].plot(results['x'], results['f_original'], 'b-', label='Original')
    if np.any(results['f_original'] != results['f_noisy']):
        axes[0, 0].plot(results['x'], results['f_noisy'], 'r:', label='Noisy')
    axes[0, 0].plot(results['x'], results['f_processed'], 'g-', label='Processed')
    axes[0, 0].set_title('Function Comparison')
    axes[0, 0].set_xlabel('x')
    axes[0, 0].set_ylabel('f(x)')
    axes[0, 0].legend()
    axes[0, 0].grid(True)
    
    # Phase comparison
    axes[0, 1].plot(results['x'], results['phase'], 'b-', label='Original Phase')
    axes[0, 1].plot(results['x'], results['smoothed_phase'], 'g-', label='Filtered Phase')
    axes[0, 1].set_title('Phase Information')
    axes[0, 1].set_xlabel('x')
    axes[0, 1].set_ylabel('Phase (radians)')
    axes[0, 1].set_ylim(-np.pi, np.pi)
    axes[0, 1].legend()
    axes[0, 1].grid(True)
    
    # Complex plane visualization
    axes[1, 0].plot(np.real(results['psi']), np.imag(results['psi']), 'b.', alpha=0.3, label='Original')
    axes[1, 0].plot(np.real(results['psi_filtered']), np.imag(results['psi_filtered']), 'g.', alpha=0.3, label='Filtered')
    axes[1, 0].set_title('Complex Plane Representation')
    axes[1, 0].set_xlabel('Re(ψ)')
    axes[1, 0].set_ylabel('Im(ψ)')
    axes[1, 0].set_aspect('equal')
    axes[1, 0].legend()
    axes[1, 0].grid(True)
    
    # Error analysis
    if np.any(results['f_original'] != results['f_noisy']):
        error_orig = results['f_noisy'] - results['f_original']
        error_proc = results['f_processed'] - results['f_original']
        axes[1, 1].plot(results['x'], error_orig, 'r-', alpha=0.5, label='Original Error')
        axes[1, 1].plot(results['x'], error_proc, 'g-', alpha=0.5, label='Processed Error')
        axes[1, 1].set_title('Error Analysis')
        axes[1, 1].set_xlabel('x')
        axes[1, 1].set_ylabel('Error')
        axes[1, 1].legend()
        axes[1, 1].grid(True)
    
    plt.tight_layout()
    plt.show()

def phase_encoding_sweep(func, x_range=(-10, 10), num_points=1000, noise_level=0.3):
    """
    Sweep through different filter parameters to find optimal settings.
    
    Parameters:
    -----------
    func : callable
        Function to process
    x_range : tuple
        Domain (min, max)
    num_points : int
        Number of points in grid
    noise_level : float
        Noise standard deviation
        
    Returns:
    --------
    best_param : float
        Best filter parameter
    best_result : dict
        Best result dictionary
    """
    filter_params = np.linspace(0.1, 1.0, 10)
    mse_values = []
    
    x = np.linspace(x_range[0], x_range[1], num_points)
    f_original = func(x)
    np.random.seed(42)
    noise = np.random.normal(0, noise_level, size=num_points)
    f_noisy = f_original + noise
    mse_noisy = np.mean((f_original - f_noisy)**2)
    
    print(f"Original MSE: {mse_noisy:.6f}")
    print("Testing filter parameters...")
    
    results_list = []
    
    for param in filter_params:
        result = direct_phase_posalice(
            func, 
            x_range=x_range, 
            num_points=num_points,
            filter_param=param,
            add_noise=True,
            noise_level=noise_level
        )
        
        mse = np.mean((f_original - result['f_processed'])**2)
        mse_values.append(mse)
        results_list.append(result)
        
        print(f"Filter param: {param:.2f}, MSE: {mse:.6f}")
    
    best_idx = np.argmin(mse_values)
    best_param = filter_params[best_idx]
    best_result = results_list[best_idx]
    best_mse = mse_values[best_idx]
    
    error_reduction = 100 * (1 - best_mse/mse_noisy)
    print(f"\nBest filter parameter: {best_param:.2f}")
    print(f"Best MSE: {best_mse:.6f}")
    print(f"Error reduction: {error_reduction:.2f}%")
    
    return best_param, best_result


# Test functions
if __name__ == "__main__":
    # Define example functions
    def simple_function(x):
        return x**2 + np.sin(3*x)
    
    def complex_function(x):
        return 2*np.sin(x) + np.sin(5*x)/2 + np.sin(0.5*x) + 0.2*x
    
    # Simple direct test
    print("\nDirect Phase Encoding - Simple Function:")
    result_simple = direct_phase_posalice(
        simple_function,
        x_range=(-5, 5),
        num_points=500,
        filter_param=0.3,
        add_noise=True,
        noise_level=0.5
    )
    visualize_phase_results(result_simple, "Simple Function - Direct Phase Encoding")
    
    # Complex function test
    print("\nDirect Phase Encoding - Complex Function:")
    result_complex = direct_phase_posalice(
        complex_function,
        x_range=(-10, 10),
        num_points=1000,
        filter_param=0.3,
        add_noise=True,
        noise_level=0.3
    )
    visualize_phase_results(result_complex, "Complex Function - Direct Phase Encoding")
    
    # Parameter sweep for optimal settings
    print("\nParameter Sweep - Simple Function:")
    best_param, best_result = phase_encoding_sweep(
        simple_function,
        x_range=(-5, 5),
        num_points=500,
        noise_level=0.5
    )
    visualize_phase_results(best_result, f"Simple Function - Optimal Filter (param={best_param:.2f})")
    
    print("\nParameter Sweep - Complex Function:")
    best_param, best_result = phase_encoding_sweep(
        complex_function,
        x_range=(-10, 10),
        num_points=1000,
        noise_level=0.3
    )
    visualize_phase_results(best_result, f"Complex Function - Optimal Filter (param={best_param:.2f})")
